package com.iksgmbh.oho.backend;

import java.io.Serializable;
import java.lang.String;

import java.util.*;
import javax.validation.constraints.*;
import io.swagger.annotations.*;
import com.fasterxml.jackson.annotation.*;

/**
 * Complete data on a hosted file
 *
 * @author generated by MOGLiCC
 */
@ApiModel(description = "Complete data on a hosted file")
public class HoroscopeRequestData implements Serializable, Cloneable
{
	private static final long serialVersionUID = 1589907425575L;

	// ===============  instance fields  ===============

    @NotNull(message="Value of mandatory attribute 'name' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private String name;

    @NotNull(message="Value of mandatory attribute 'gender' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private String gender;

    @NotNull(message="Value of mandatory attribute 'birthday' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private String birthday;


	// ===============  setter methods  ===============

	public void setName(final String name)
	{
		this.name = name;
	}

	public void setGender(final String gender)
	{
		this.gender = gender;
	}

	public void setBirthday(final String birthday)
	{
		this.birthday = birthday;
	}

	// ===============  getter methods  ===============

	public String getName()
	{
		return name;
	}

	public String getGender()
	{
		return gender;
	}

	public String getBirthday()
	{
		return birthday;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "HoroscopeRequestData ["
				+ "name = " + name + ", "
				+ "gender = " + gender + ", "
				+ "birthday = " + birthday + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final HoroscopeRequestData other = (HoroscopeRequestData) obj;

		if (name == null)
		{
			if (other.name != null)
				return false;
		} else
		{
			if (! name.equals(other.name))
				   return false;
		}
		if (gender == null)
		{
			if (other.gender != null)
				return false;
		} else
		{
			if (! gender.equals(other.gender))
				   return false;
		}
		if (birthday == null)
		{
			if (other.birthday != null)
				return false;
		} else
		{
			if (! birthday.equals(other.birthday))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + ((birthday == null) ? 0 : birthday.hashCode());

		return result;
	}

	@Override
	public Object clone()
	{
		final HoroscopeRequestData clone;
		try {
			clone = (HoroscopeRequestData) super.clone();
		} catch (Exception e) {
			throw new AssertionError("Unexpected error cloning " + this);
		}

		if (this.name != null) clone.name = new String(name);
		if (this.gender != null) clone.gender = new String(gender);
		if (this.birthday != null) clone.birthday = new String(birthday);

		return clone;
	}

	public void merge(HoroscopeRequestData otherHoroscopeRequestData)
	{
        if (otherHoroscopeRequestData.getName() != null) {
            if(! otherHoroscopeRequestData.getName().isEmpty()) {
           	 this.setName(otherHoroscopeRequestData.getName());
            }
       }
        if (otherHoroscopeRequestData.getGender() != null) {
            if(! otherHoroscopeRequestData.getGender().isEmpty()) {
           	 this.setGender(otherHoroscopeRequestData.getGender());
            }
       }
        if (otherHoroscopeRequestData.getBirthday() != null) {
            if(! otherHoroscopeRequestData.getBirthday().isEmpty()) {
           	 this.setBirthday(otherHoroscopeRequestData.getBirthday());
            }
       }
	}
}