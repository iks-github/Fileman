/*
 * Copyright 2020 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.iksgmbh.fileman.backend;

import java.io.Serializable;

import javax.validation.constraints.NotNull;

import io.swagger.annotations.ApiModelProperty;

/**
 * @author generated by MOGLiCC
 */
public class ExceptionMetaData implements Serializable
{
	private static final long serialVersionUID = 1588950083212L;

	// ===============  instance fields  ===============

    @NotNull(message="Value of mandatory attribute 'timestamp' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private Long timestamp;

    @NotNull(message="Value of mandatory attribute 'message' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private String message;

    @NotNull(message="Value of mandatory attribute 'details' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private String details;


	// ===============  setter methods  ===============

	public void setTimestamp(final Long timestamp)
	{
		this.timestamp = timestamp;
	}

	public void setMessage(final String message)
	{
		this.message = message;
	}

	public void setDetails(final String details)
	{
		this.details = details;
	}

	// ===============  getter methods  ===============

	public Long getTimestamp()
	{
		return timestamp;
	}

	public String getMessage()
	{
		return message;
	}

	public String getDetails()
	{
		return details;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "ExceptionMetaData ["
				+ "timestamp = " + timestamp + ", "
				+ "message = " + message + ", "
				+ "details = " + details + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final ExceptionMetaData other = (ExceptionMetaData) obj;

		if (timestamp == null)
		{
			if (other.timestamp != null)
				return false;
		} else
		{
			if (! timestamp.equals(other.timestamp))
				   return false;
		}
		if (message == null)
		{
			if (other.message != null)
				return false;
		} else
		{
			if (! message.equals(other.message))
				   return false;
		}
		if (details == null)
		{
			if (other.details != null)
				return false;
		} else
		{
			if (! details.equals(other.details))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((timestamp == null) ? 0 : timestamp.hashCode());
		result = prime * result + ((message == null) ? 0 : message.hashCode());
		result = prime * result + ((details == null) ? 0 : details.hashCode());

		return result;
	}


	public void merge(ExceptionMetaData otherExceptionMetaData)
	{
        if (otherExceptionMetaData.getTimestamp() != null) {
            this.setTimestamp(otherExceptionMetaData.getTimestamp());
       }
        if (otherExceptionMetaData.getMessage() != null) {
            if(! otherExceptionMetaData.getMessage().isEmpty()) {
           	 this.setMessage(otherExceptionMetaData.getMessage());
            }
       }
        if (otherExceptionMetaData.getDetails() != null) {
            if(! otherExceptionMetaData.getDetails().isEmpty()) {
           	 this.setDetails(otherExceptionMetaData.getDetails());
            }
       }
	}
}