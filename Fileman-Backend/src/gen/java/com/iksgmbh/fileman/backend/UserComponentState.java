package com.iksgmbh.fileman.backend;

import com.iksgmbh.fileman.backend.User;
import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;

import javax.validation.constraints.*;
import javax.persistence.*;

import io.swagger.annotations.*;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * JavaBean class of the MOGLiCC JavaBean Group.
 *
 * Data for user component state
 *
 * This file is autogenerated by MOGLiCC. Do not modify manually!
 */
@ApiModel(description = "Data for user component state")
@Entity
@Table(name="USER_COMPONENT_STATE")
public class UserComponentState implements Serializable
{
	private static final long serialVersionUID = 1592918434754L;

	// ===============  instance fields  ===============

    @Column(name="USER_ID", unique=true, columnDefinition="int")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer userId;

    @NotNull(message="Value of mandatory attribute 'layoutType' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    @Column(name="LAYOUT_TYPE", columnDefinition="varchar")
	private String layoutType;

    @NotNull(message="Value of mandatory attribute 'searchText' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    @Column(name="SEARCH_TEXT", columnDefinition="varchar")
	private String searchText;

    @NotNull(message="Value of mandatory attribute 'favouriteFilterOn' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    @Column(name="FAVOURITE_FILTER_ON", columnDefinition="boolean")
	private Boolean favouriteFilterOn;


	// ===============  setter methods  ===============

	public void setUserId(final Integer userId)
	{
		this.userId = userId;
	}

	public void setLayoutType(final String layoutType)
	{
		this.layoutType = layoutType;
	}

	public void setSearchText(final String searchText)
	{
		this.searchText = searchText;
	}

	public void setFavouriteFilterOn(final Boolean favouriteFilterOn)
	{
		this.favouriteFilterOn = favouriteFilterOn;
	}

	// ===============  getter methods  ===============

	public Integer getUserId()
	{
		return userId;
	}

	public String getLayoutType()
	{
		return layoutType;
	}

	public String getSearchText()
	{
		return searchText;
	}

	public Boolean getFavouriteFilterOn()
	{
		return favouriteFilterOn;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "UserComponentState ["
				+ "userId = " + userId + ", "
				+ "layoutType = " + layoutType + ", "
				+ "searchText = " + searchText + ", "
				+ "favouriteFilterOn = " + favouriteFilterOn + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final UserComponentState other = (UserComponentState) obj;

		if (userId == null)
		{
			if (other.userId != null)
				return false;
		} else
		{
			if (! userId.equals(other.userId))
				   return false;
		}
		if (layoutType == null)
		{
			if (other.layoutType != null)
				return false;
		} else
		{
			if (! layoutType.equals(other.layoutType))
				   return false;
		}
		if (searchText == null)
		{
			if (other.searchText != null)
				return false;
		} else
		{
			if (! searchText.equals(other.searchText))
				   return false;
		}
		if (favouriteFilterOn == null)
		{
			if (other.favouriteFilterOn != null)
				return false;
		} else
		{
			if (! favouriteFilterOn.equals(other.favouriteFilterOn))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		result = prime * result + ((layoutType == null) ? 0 : layoutType.hashCode());
		result = prime * result + ((searchText == null) ? 0 : searchText.hashCode());
		result = prime * result + ((favouriteFilterOn == null) ? 0 : favouriteFilterOn.hashCode());

		return result;
	}


	public void merge(UserComponentState otherUserComponentState)
	{
        if (otherUserComponentState.getUserId() != null) {
            this.setUserId(otherUserComponentState.getUserId());
       }
        if (otherUserComponentState.getLayoutType() != null) {
            if(! otherUserComponentState.getLayoutType().isEmpty()) {
           	 this.setLayoutType(otherUserComponentState.getLayoutType());
            }
       }
        if (otherUserComponentState.getSearchText() != null) {
            if(! otherUserComponentState.getSearchText().isEmpty()) {
           	 this.setSearchText(otherUserComponentState.getSearchText());
            }
       }
        if (otherUserComponentState.getFavouriteFilterOn() != null) {
            this.setFavouriteFilterOn(otherUserComponentState.getFavouriteFilterOn());
       }
	}
}