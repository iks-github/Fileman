package com.iksgmbh.fileman.backend.dao;

import java.util.List;

import org.springframework.stereotype.Component;

import com.iksgmbh.fileman.backend.*;

import javax.persistence.*;
import javax.persistence.criteria.*;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

@Component
/**
 * Implementation of basic dao functionalities.
 * This file is autogenerated by MOGLiCC. Do not modify manually!
 */
@Repository
@Transactional
public class FileGroupBasicDao
{
	@PersistenceContext
	protected EntityManager entityManager;

	public List<FileGroup> findAllFileGroups() {
		CriteriaQuery<FileGroup> criteria = entityManager.getCriteriaBuilder().createQuery(FileGroup.class);
		criteria.select(criteria.from(FileGroup.class));
		return entityManager.createQuery(criteria).getResultList();
	}

	public FileGroup findByIdAndTenant(Integer id, Tenant tenant) {
        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<FileGroup> criteria = criteriaBuilder.createQuery(FileGroup.class);
        Root<FileGroup> fileGroup = criteria.from(FileGroup.class);
        criteria.select(fileGroup).where(
                criteriaBuilder.and(
                        criteriaBuilder.equal(fileGroup.get("id"), id),
                        criteriaBuilder.equal(fileGroup.get("tenant"), tenant)));
        return entityManager.createQuery(criteria).getSingleResult();
	}

	public FileGroup findById(Integer id) {
		return entityManager.find(FileGroup.class, id);
	}

	public FileGroup findByName(String name)
	{
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
		CriteriaQuery<FileGroup> criteria = criteriaBuilder.createQuery(FileGroup.class);
		Root<FileGroup> root = criteria.from(FileGroup.class);
		criteria.select(root).where(criteriaBuilder.equal(root.get("name"), name));
		return entityManager.createQuery(criteria).getSingleResult();
	}

	public List<FileGroup> findAllForTenant(Tenant toSearch) {
        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<FileGroup> criteria = criteriaBuilder.createQuery(FileGroup.class);
        Root<FileGroup> fileGroup = criteria.from(FileGroup.class);
        criteria.where(criteriaBuilder.equal(fileGroup.get("tenant"), toSearch));
        return entityManager.createQuery(criteria).getResultList();
	}

	public boolean update(FileGroup entity) {
		try {
			entityManager.merge(entity);
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public FileGroup create(FileGroup entity) {
		entityManager.persist(entity);
		return entity;
	}

	public void delete(FileGroup entity) {
		entityManager.remove(entity);
	}
}