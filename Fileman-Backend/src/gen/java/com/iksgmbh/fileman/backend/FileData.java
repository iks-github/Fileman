/*
 * Copyright 2020 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.iksgmbh.fileman.backend;

import java.io.Serializable;

import javax.validation.constraints.NotNull;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Complete data on a hosted file
 *
 * @author generated by MOGLiCC
 */
@ApiModel(description = "Complete data on a hosted file")
public class FileData implements Serializable, Cloneable
{
	private static final long serialVersionUID = 1588950083072L;

	// ===============  instance fields  ===============

    @NotNull(message="Value of mandatory attribute 'metaData' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private FileMetaData metaData;

    @NotNull(message="Value of mandatory attribute 'contentData' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private FileContentData contentData;


	// ===============  setter methods  ===============

	public void setMetaData(final FileMetaData metaData)
	{
		this.metaData = metaData;
	}

	public void setContentData(final FileContentData contentData)
	{
		this.contentData = contentData;
	}

	// ===============  getter methods  ===============

	public FileMetaData getMetaData()
	{
		return metaData;
	}

	public FileContentData getContentData()
	{
		return contentData;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "FileData ["
				+ "metaData = " + metaData + ", "
				+ "contentData = " + contentData + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final FileData other = (FileData) obj;

		if (metaData == null)
		{
			if (other.metaData != null)
				return false;
		} else
		{
			if (! metaData.equals(other.metaData))
				   return false;
		}
		if (contentData == null)
		{
			if (other.contentData != null)
				return false;
		} else
		{
			if (! contentData.equals(other.contentData))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((metaData == null) ? 0 : metaData.hashCode());
		result = prime * result + ((contentData == null) ? 0 : contentData.hashCode());

		return result;
	}

	@Override
	public Object clone()
	{
		final FileData clone;
		try {
			clone = (FileData) super.clone();
		} catch (Exception e) {
			throw new AssertionError("Unexpected error cloning " + this);
		}

		if (this.metaData != null) clone.metaData = (FileMetaData)this.metaData.clone();  // probably, here is need of manual adaptation
		if (this.contentData != null) clone.contentData = (FileContentData)this.contentData.clone();  // probably, here is need of manual adaptation

		return clone;
	}

	public void merge(FileData otherFileData)
	{
        if (otherFileData.getMetaData() != null) {
            this.setMetaData(otherFileData.getMetaData());
       }
        if (otherFileData.getContentData() != null) {
            this.setContentData(otherFileData.getContentData());
       }
	}
}