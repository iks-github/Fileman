package com.iksgmbh.fileman.backend;

import com.iksgmbh.fileman.backend.User;
import java.io.Serializable;
import java.lang.Integer;
import java.lang.String;
import java.util.List;

import javax.validation.constraints.*;
import javax.persistence.*;

import io.swagger.annotations.*;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * JavaBean class of the MOGLiCC JavaBean Group.
 *
 * Data of a Fileman tenant
 *
 * This file is autogenerated by MOGLiCC. Do not modify manually!
 */
@ApiModel(description = "Data of a Fileman tenant")
@Entity
@Table(name="TENANT")
public class Tenant implements Serializable, Cloneable
{
	private static final long serialVersionUID = 1599149481050L;

	// ===============  instance fields  ===============

    @Column(name="ID", unique=true, columnDefinition="int")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

    @NotNull(message="Value of mandatory attribute 'name' is not present.")
    @Size(min=2, max=64, message="Value of attribute 'name' is out of valid range (2-64)")
    @ApiModelProperty(notes = "Mandatory. Valid length ranges from 2 to 64.")
    @Column(name="NAME", unique=true, columnDefinition="varchar")
	private String name;

    @JsonProperty(access = Access.WRITE_ONLY)
	@OneToMany(mappedBy="tenant")
    @Transient
	private List<User> users;


	// ===============  setter methods  ===============

	public void setId(final Integer id)
	{
		this.id = id;
	}

	public void setName(final String name)
	{
		this.name = name;
	}

	public void setUsers(final List<User> users)
	{
		this.users = users;
	}

	// ===============  getter methods  ===============

	public Integer getId()
	{
		return id;
	}

	public String getName()
	{
		return name;
	}

	public List<User> getUsers()
	{
		return users;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "Tenant ["
				+ "id = " + id + ", "
				+ "name = " + name + ", "
				+ "users = " + users + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final Tenant other = (Tenant) obj;

		if (id == null)
		{
			if (other.id != null)
				return false;
		} else
		{
			if (! id.equals(other.id))
				   return false;
		}
		if (name == null)
		{
			if (other.name != null)
				return false;
		} else
		{
			if (! name.equals(other.name))
				   return false;
		}
		if (users == null)
		{
			if (other.users != null)
				return false;
		} else
		{
			if (! users.equals(other.users))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((users == null) ? 0 : users.hashCode());

		return result;
	}

	@Override
	public Object clone()
	{
		final Tenant clone;
		try {
			clone = (Tenant) super.clone();
		} catch (Exception e) {
			throw new AssertionError("Unexpected error cloning " + this);
		}

		if (this.id != null) clone.id = new Integer(this.id);
		if (this.name != null) clone.name = new String(name);

		if ( this.users != null )
		{
			final  List<User> listUser = new java.util.ArrayList<User>();
			for (final User element : users) {
				listUser.add(element);
			}
		}

		return clone;
	}

	public void merge(Tenant otherTenant)
	{
        if (otherTenant.getId() != null) {
            this.setId(otherTenant.getId());
       }
        if (otherTenant.getName() != null) {
            if(! otherTenant.getName().isEmpty()) {
           	 this.setName(otherTenant.getName());
            }
       }
        if (otherTenant.getUsers() != null) {
            this.setUsers(otherTenant.getUsers());
       }
	}
}