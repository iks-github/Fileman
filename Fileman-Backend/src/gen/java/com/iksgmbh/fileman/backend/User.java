package com.iksgmbh.fileman.backend;

import java.io.Serializable;
import java.lang.Integer;
import java.lang.String;

import java.util.*;
import javax.validation.constraints.*;
import io.swagger.annotations.*;
import com.fasterxml.jackson.annotation.*;

/**
 * JavaBean class of the MOGLiCC JavaBean Group.
 *
 * Data of a Fileman user
 *
 * @author generated by MOGLiCC
 */
@ApiModel(description = "Data of a Fileman user")
public class User implements Serializable
{
	private static final long serialVersionUID = 1589298903028L;

	// ===============  instance fields  ===============

    @NotNull(message="Value of mandatory attribute 'id' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private Integer id;

    @NotNull(message="Value of mandatory attribute 'name' is not present.")
    @Size(min=2, max=64, message="Value of attribute 'name' is out of valid range (2-64)")
    @ApiModelProperty(notes = "Mandatory. Valid length ranges from 2 to 64.")
	private String name;

    @NotNull(message="Value of mandatory attribute 'password' is not present.")
    @Size(min=1, max=32, message="Value of attribute 'password' is out of valid range (1-32)")
    @ApiModelProperty(notes = "Mandatory. Valid length ranges from 1 to 32.")
	@JsonIgnore
	private String password;

    @NotNull(message="Value of mandatory attribute 'role' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
	private String role;


	// ===============  setter methods  ===============

	public void setId(final Integer id)
	{
		this.id = id;
	}

	public void setName(final String name)
	{
		this.name = name;
	}

	public void setPassword(final String password)
	{
		this.password = password;
	}

	public void setRole(final String role)
	{
		this.role = role;
	}

	// ===============  getter methods  ===============

	public Integer getId()
	{
		return id;
	}

	public String getName()
	{
		return name;
	}

	public String getPassword()
	{
		return password;
	}

	public String getRole()
	{
		return role;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "User ["
				+ "id = " + id + ", "
				+ "name = " + name + ", "
				+ "password = " + password + ", "
				+ "role = " + role + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final User other = (User) obj;

		if (id == null)
		{
			if (other.id != null)
				return false;
		} else
		{
			if (! id.equals(other.id))
				   return false;
		}
		if (name == null)
		{
			if (other.name != null)
				return false;
		} else
		{
			if (! name.equals(other.name))
				   return false;
		}
		if (password == null)
		{
			if (other.password != null)
				return false;
		} else
		{
			if (! password.equals(other.password))
				   return false;
		}
		if (role == null)
		{
			if (other.role != null)
				return false;
		} else
		{
			if (! role.equals(other.role))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((password == null) ? 0 : password.hashCode());
		result = prime * result + ((role == null) ? 0 : role.hashCode());

		return result;
	}


	public void merge(User otherUser)
	{
        if (otherUser.getId() != null) {
            this.setId(otherUser.getId());
       }
        if (otherUser.getName() != null) {
            if(! otherUser.getName().isEmpty()) {
           	 this.setName(otherUser.getName());
            }
       }
        if (otherUser.getPassword() != null) {
            if(! otherUser.getPassword().isEmpty()) {
           	 this.setPassword(otherUser.getPassword());
            }
       }
        if (otherUser.getRole() != null) {
            if(! otherUser.getRole().isEmpty()) {
           	 this.setRole(otherUser.getRole());
            }
       }
	}
}