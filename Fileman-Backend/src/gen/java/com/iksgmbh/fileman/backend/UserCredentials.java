/*
 * Copyright 2020 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.iksgmbh.fileman.backend;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import io.swagger.annotations.ApiModelProperty;

/**
 * @author generated by MOGLiCC
 */
public class UserCredentials
{
	// ===============  instance fields  ===============

    @NotNull(message="Value of mandatory attribute 'userId' is not present.")
    @Size(min=2, max=64, message="Value of attribute 'userId' is out of valid range (2-64)")
    @ApiModelProperty(notes = "Mandatory. Valid length ranges from 2 to 64.")
	private String userId;

    @NotNull(message="Value of mandatory attribute 'userPw' is not present.")
    @Size(min=1, max=32, message="Value of attribute 'userPw' is out of valid range (1-32)")
    @ApiModelProperty(notes = "Mandatory. Valid length ranges from 1 to 32.")
	private String userPw;


	// ===============  setter methods  ===============

	public void setUserId(final String userId)
	{
		this.userId = userId;
	}

	public void setUserPw(final String userPw)
	{
		this.userPw = userPw;
	}

	// ===============  getter methods  ===============

	public String getUserId()
	{
		return userId;
	}

	public String getUserPw()
	{
		return userPw;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "UserCredentials ["
				+ "userId = " + userId + ", "
				+ "userPw = " + userPw + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final UserCredentials other = (UserCredentials) obj;

		if (userId == null)
		{
			if (other.userId != null)
				return false;
		} else
		{
			if (! userId.equals(other.userId))
				   return false;
		}
		if (userPw == null)
		{
			if (other.userPw != null)
				return false;
		} else
		{
			if (! userPw.equals(other.userPw))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		result = prime * result + ((userPw == null) ? 0 : userPw.hashCode());

		return result;
	}


	public void merge(UserCredentials otherUserCredentials)
	{
        if (otherUserCredentials.getUserId() != null) {
            if(! otherUserCredentials.getUserId().isEmpty()) {
           	 this.setUserId(otherUserCredentials.getUserId());
            }
       }
        if (otherUserCredentials.getUserPw() != null) {
            if(! otherUserCredentials.getUserPw().isEmpty()) {
           	 this.setUserPw(otherUserCredentials.getUserPw());
            }
       }
	}
}