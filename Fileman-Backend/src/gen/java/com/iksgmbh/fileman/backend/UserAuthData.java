/*
 * Copyright 2020 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.iksgmbh.fileman.backend;

/**
 * @author generated by MOGLiCC
 */
public class UserAuthData
{
	// ===============  instance fields  ===============

	private Boolean ok;

	private String authToken;


	// ===============  setter methods  ===============

	public void setOk(final Boolean ok)
	{
		this.ok = ok;
	}

	public void setAuthToken(final String authToken)
	{
		this.authToken = authToken;
	}

	// ===============  getter methods  ===============

	public Boolean getOk()
	{
		return ok;
	}

	public String getAuthToken()
	{
		return authToken;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "UserAuthData ["
				+ "ok = " + ok + ", "
				+ "authToken = " + authToken + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final UserAuthData other = (UserAuthData) obj;

		if (ok == null)
		{
			if (other.ok != null)
				return false;
		} else
		{
			if (! ok.equals(other.ok))
				   return false;
		}
		if (authToken == null)
		{
			if (other.authToken != null)
				return false;
		} else
		{
			if (! authToken.equals(other.authToken))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((ok == null) ? 0 : ok.hashCode());
		result = prime * result + ((authToken == null) ? 0 : authToken.hashCode());

		return result;
	}


	public void merge(UserAuthData otherUserAuthData)
	{
        if (otherUserAuthData.getOk() != null) {
            this.setOk(otherUserAuthData.getOk());
       }
        if (otherUserAuthData.getAuthToken() != null) {
            if(! otherUserAuthData.getAuthToken().isEmpty()) {
           	 this.setAuthToken(otherUserAuthData.getAuthToken());
            }
       }
	}
}