package com.iksgmbh.fileman.backend;

import com.iksgmbh.fileman.backend.User;
import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;

import javax.validation.constraints.*;
import javax.persistence.*;

import io.swagger.annotations.*;

import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * JavaBean class of the MOGLiCC JavaBean Group.
 *
 * Data for user component state
 *
 * This file is autogenerated by MOGLiCC. Do not modify manually!
 */
@ApiModel(description = "Data for user component state")
@Entity
@Table(name="USER_PREFERENCES")
public class UserPreferences implements Serializable
{
	private static final long serialVersionUID = 1600193157040L;

	// ===============  instance fields  ===============

    @Column(name="USER_ID", unique=true, columnDefinition="int")
    @Id
    private Integer userId;

    @NotNull(message="Value of mandatory attribute 'contentType' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    @Column(name="CONTENT_TYPE", columnDefinition="varchar")
    private String contentType;

    @NotNull(message="Value of mandatory attribute 'layoutType' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    @Column(name="LAYOUT_TYPE", columnDefinition="varchar")
    private String layoutType;

    @NotNull(message="Value of mandatory attribute 'favouriteFilterActive' is not present.")
    @ApiModelProperty(notes = "Mandatory.")
    @Column(name="FAVOURITE_FILTER_ACTIVE", columnDefinition="boolean")
    private Boolean favouriteFilterActive;


	// ===============  setter methods  ===============

	public void setUserId(final Integer userId)
	{
		this.userId = userId;
	}

	public void setContentType(final String contentType)
	{
		this.contentType = contentType;
	}

	public void setLayoutType(final String layoutType)
	{
		this.layoutType = layoutType;
	}

	public void setFavouriteFilterActive(final Boolean favouriteFilterActive)
	{
		this.favouriteFilterActive = favouriteFilterActive;
	}

	// ===============  getter methods  ===============

	public Integer getUserId()
	{
		return userId;
	}

	public String getContentType()
	{
		return contentType;
	}

	public String getLayoutType()
	{
		return layoutType;
	}

	public Boolean getFavouriteFilterActive()
	{
		return favouriteFilterActive;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "UserPreferences ["
				+ "userId = " + userId + ", "
				+ "contentType = " + contentType + ", "
				+ "layoutType = " + layoutType + ", "
				+ "favouriteFilterActive = " + favouriteFilterActive + ""
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final UserPreferences other = (UserPreferences) obj;

		if (userId == null)
		{
			if (other.userId != null)
				return false;
		} else
		{
			if (! userId.equals(other.userId))
				   return false;
		}
		if (contentType == null)
		{
			if (other.contentType != null)
				return false;
		} else
		{
			if (! contentType.equals(other.contentType))
				   return false;
		}
		if (layoutType == null)
		{
			if (other.layoutType != null)
				return false;
		} else
		{
			if (! layoutType.equals(other.layoutType))
				   return false;
		}
		if (favouriteFilterActive == null)
		{
			if (other.favouriteFilterActive != null)
				return false;
		} else
		{
			if (! favouriteFilterActive.equals(other.favouriteFilterActive))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		result = prime * result + ((contentType == null) ? 0 : contentType.hashCode());
		result = prime * result + ((layoutType == null) ? 0 : layoutType.hashCode());
		result = prime * result + ((favouriteFilterActive == null) ? 0 : favouriteFilterActive.hashCode());

		return result;
	}


	public void merge(UserPreferences otherUserPreferences)
	{
        if (otherUserPreferences.getUserId() != null) {
            this.setUserId(otherUserPreferences.getUserId());
       }
        if (otherUserPreferences.getContentType() != null) {
            if(! otherUserPreferences.getContentType().isEmpty()) {
           	 this.setContentType(otherUserPreferences.getContentType());
            }
       }
        if (otherUserPreferences.getLayoutType() != null) {
            if(! otherUserPreferences.getLayoutType().isEmpty()) {
           	 this.setLayoutType(otherUserPreferences.getLayoutType());
            }
       }
        if (otherUserPreferences.getFavouriteFilterActive() != null) {
            this.setFavouriteFilterActive(otherUserPreferences.getFavouriteFilterActive());
       }
	}
}