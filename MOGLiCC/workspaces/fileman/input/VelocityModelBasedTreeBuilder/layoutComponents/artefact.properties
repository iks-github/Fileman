# Note:
# An artefact of the VelocityModelBasedTreeBuilder is defined by a whole file structure: 
# a FILE STRUCTURE TEMPLATE or TREE BUILDER TEMPLATE. 
# Such a template must include a "artefact.properties" which represents NO Java properties file. 
# The content of this file corresponds to the header of a main template file of artifacts of other generators.   
# For similarity reason, this file is structured and handled as a main template - a template without body, because
# the artefact's template represents a file structure.  
#
# Syntax for replaceIn properties is
# @ReplaceIn <fileEndingPattern> <placeholder> <replacement>
#
# Possible values for <fileEndingPattern> are e.g.: 
# "java" or ".java" for java files, "Test.java" for all Test java files, "pom.xml" for the pom.xml file(s),    
# "docu/readme.txt"  for the readme.txt in the docu-subfolder, "*" for all files that belong to the FILE STRUCTURE TEMPLATE
# File ending pattern is allowed to match either before or after file renaming!
#
# Syntax for RenameFile properties is
# @ReplaceIn <oldFileName> <newFileName>
#
# Syntax for RenameDir properties is
# @ReplaceIn <oldPath> <newPath>
# This renaming allows to change whole pathes, e.g. <projectPath> by <com.iksgmbh.mogliicc>
#

#set

@NameOfValidModel SpringBootBackendAngularFrontModel		               # should be defined before using ModelMetaInfo references - build artefact only if this model is used
@RootName ${model.getMetaInfoValueFor("newDomainObject")}                    # the name of the main folder that is created by this artifact
@TargetDir $model.getMetaInfoValueFor("frontendSrcDir")/components/layout  # the parent of the main folder
@CreateNew false                                 			               # creates root folder only if not existing 

# the following lines define text replacements in text files that belongs to the FILE STRUCTURE TEMPLATE
@ReplaceIn list-layout-component.ts <<type>> ${model.getMetaInfoValueFor("newDomainObject")}
@ReplaceIn table-layout-component.ts <<type>> ${model.getMetaInfoValueFor("newDomainObject")}
@ReplaceIn tiles-layout-component.ts <<type>> ${model.getMetaInfoValueFor("newDomainObject")}

@ReplaceIn list-layout-component.ts <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})
@ReplaceIn table-layout-component.ts <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})
@ReplaceIn tiles-layout-component.ts <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})

@ReplaceIn list-layout-component.html <<type>> ${model.getMetaInfoValueFor("newDomainObject")}
@ReplaceIn table-layout-component.html <<type>> ${model.getMetaInfoValueFor("newDomainObject")}
@ReplaceIn tiles-layout-component.html <<type>> ${model.getMetaInfoValueFor("newDomainObject")}

@ReplaceIn list-layout-component.html <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})
@ReplaceIn table-layout-component.html <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})
@ReplaceIn tiles-layout-component.html <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})

@ReplaceIn layout-commons.ts <<Type>> $TemplateStringUtility.firstToUpperCase(${model.getMetaInfoValueFor("newDomainObject")})

@ReplaceIn layout-commons.ts <<type>> ${model.getMetaInfoValueFor("newDomainObject")}

# the following lines define renamings of files that belongs to the FILE STRUCTURE TEMPLATE
@RenameFile table-layout-component.ts fileman-${model.getMetaInfoValueFor("newDomainObject")}-table-layout-component.ts 
@RenameFile table-layout-component.html fileman-${model.getMetaInfoValueFor("newDomainObject")}-table-layout-component.html
@RenameFile table-layout-component.css fileman-${model.getMetaInfoValueFor("newDomainObject")}-table-layout-component.css

@RenameFile list-layout-component.ts fileman-${model.getMetaInfoValueFor("newDomainObject")}-list-layout-component.ts
@RenameFile list-layout-component.html fileman-${model.getMetaInfoValueFor("newDomainObject")}-list-layout-component.html
@RenameFile list-layout-component.css fileman-${model.getMetaInfoValueFor("newDomainObject")}-list-layout-component.css

@RenameFile tiles-layout-component.ts fileman-${model.getMetaInfoValueFor("newDomainObject")}-tiles-layout-component.ts
@RenameFile tiles-layout-component.html fileman-${model.getMetaInfoValueFor("newDomainObject")}-tiles-layout-component.html
@RenameFile tiles-layout-component.css fileman-${model.getMetaInfoValueFor("newDomainObject")}-tiles-layout-component.css

@RenameFile layout-commons.ts layout-${model.getMetaInfoValueFor("newDomainObject")}-commons.ts

# the following lines define renamings of directories within FILE STRUCTURE TEMPLATE
#@RenameDir domaintype ${model.getMetaInfoValueFor("newDomainObject")}
